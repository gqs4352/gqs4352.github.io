<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>龚哥の博客</title>
  
  <subtitle>守破离</subtitle>
  <link href="http://gqs666.gq/atom.xml" rel="self"/>
  
  <link href="http://gqs666.gq/"/>
  <updated>2020-11-12T08:45:43.221Z</updated>
  <id>http://gqs666.gq/</id>
  
  <author>
    <name>Mr.G</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux系统下一键dd安装Centos6-7、Debian7-10、Ubuntu14-18、Windows等</title>
    <link href="http://gqs666.gq/2020/11/12/article06/"/>
    <id>http://gqs666.gq/2020/11/12/article06/</id>
    <published>2020-11-12T08:44:22.000Z</published>
    <updated>2020-11-12T08:45:43.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>集合了Linux和WIN包<br>Linux：centos6-7; Ubuntu 14 16 18；Debian 7 8 9 10；<br>WIN：集合了“”萌咖大佬、老司机、MeowLove “”的系统<br>包含win7 2003 2006 2012 2008 2016 2019等系统<br>当然也可以自定义<br><a href="https://img.zvv.me/file/zvvmebuc/img/2020/02/2020-02-13_11-57-39.png"><img src="https://img.zvv.me/file/zvvmebuc/img/2020/02/2020-02-13_11-57-39.png"></a></p><p>linux默认密码：MoeClub.org 或 cxthhhhh.com（Centos7）</p><p>1、镜像文件在OneDrive</p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/veip007/dd/master/dd-od.sh &amp;&amp; chmod +x dd-od.sh &amp;&amp; ./dd-od.sh</code></pre><p>2、镜像文件在GoogleDrive</p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/veip007/dd/master/dd-gd.sh &amp;&amp; chmod +x dd-gd.sh &amp;&amp; ./dd-gd.sh  1) CentOS 7 (DD) 用户名：root 密码：Pwd@CentOS  2) CentOS 6 (阿里云镜像) 用户名：root 密码：MoeClub.org  3) CentOS 6 用户名：root 密码：MoeClub.org  4) Debian 7 x32 用户名：root 密码：MoeClub.org  5) Debian 8 x64 用户名：root 密码：MoeClub.org  6) Debian 9 x64 用户名：root 密码：MoeClub.org  7) Debian 10 x64 用户名：root 密码：cxthhhhh.com  8) Ubuntu 14.04x64 用户名：root 密码：MoeClub.org  9) Ubuntu 16.04x64 用户名：root 密码：MoeClub.org  10) Ubuntu 18.04x64 用户名：root 密码：MoeClub.org  11) 萌咖Win7x64 用户名:Administrator  密码：Vicer  12) Win2019 By:MeowLove  密码：cxthhhhh.com  13) Win2016 By:MeowLove  密码：cxthhhhh.com  14) Win2012 R2 By:MeowLove  密码：cxthhhhh.com  15) Win2008 R2 By:MeowLove  密码：cxthhhhh.com  16) Windows 7 Vienna By:MeowLove  密码：cxthhhhh.com  17) Windows 2003 Vienna By:MeowLove  密码：cxthhhhh.com  18) Win7x32 By:不知道作者了  用户名:Administrator  密码：Windows7x86-Chinese  19) Win-2003x32 By:老司机  用户名:Administrator  密码：WinSrv2003x86-Chinese  20) Win2008x64 By:老司机  用户名:Administrator  密码：WinSrv2008x64-Chinese  21) Win2012R2x64 By:老司机  用户名:Administrator  密码：WinSrv2012r2  22) CentOS 8 用户名：root 密码：cxthhhhh.com 推荐512M以上使用</code></pre><p>via.<a href="https://zvv.me/go/aHR0cHM6Ly9sb3d2cHMuY24vbGludXgtZGQtY2VudG9zNi03LWRlYmlhbjctMTAtdWJ1bnR1MTQtMTgtd2luZG93cy8=">https://lowvps.cn/linux-dd-centos6-7-debian7-10-ubuntu14-18-windows/</a></p><hr><p>SSH下，root用户。下面的1 和 2，任选1个即可。除Centos7外，其他系统<strong>默认root密码为 MoeClub.org</strong></p><p>1、CentOS 7系统为loc的dansnow大佬制作，脚本也是这个大佬的。CentOS 7的root密码为 Pwd@CentOS</p><pre><code>wget --no-check-certificate -qO AutoDD.sh &#39;https://zhujiwiki.com/wp-content/uploads/2019/07/autodd.sh&#39; &amp;&amp; bash AutoDD.sh</code></pre><p>2、CentOS 7系统为cxthhhhh.com大佬制作。CentOS 7的root密码 cxthhhhh.com</p><pre><code>wget --no-check-certificate -qO AutoDDT.sh &#39;https://zhujiwiki.com/wp-content/uploads/2019/07/autoddt.sh&#39; &amp;&amp; bash AutoDDT.sh</code></pre><p>相关引用：<a href="https://www.hostloc.com/thread-560745-1-1.html">https://www.hostloc.com/thread-560745-1-1.html</a></p><p> via。<a href="https://zvv.me/go/aHR0cHM6Ly96aHVqaXdpa2kuY29tLzEzMzUwLw==">https://zhujiwiki.com/13350/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="-linux" scheme="http://gqs666.gq/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>redis缓存穿透，缓存击穿，缓存雪崩原因+解决方案</title>
    <link href="http://gqs666.gq/2020/11/12/article05/"/>
    <id>http://gqs666.gq/2020/11/12/article05/</id>
    <published>2020-11-12T03:25:54.000Z</published>
    <updated>2020-11-12T03:28:46.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在我们日常的开发中，无不都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在高并发的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，磁盘读/写速度比较慢的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成成千上万次的读/写操作，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。</p><p>为了克服上述的问题，项目通常会引入NoSQL技术，这是一种基于内存的数据库，并且提供一定的持久化功能。</p><p>redis技术就是NoSQL技术中的一种，但是引入redis又有可能出现缓存穿透，缓存击穿，缓存雪崩等问题。本文就对这三种问题进行较深入剖析。</p><h3 id="二、初认识"><a href="#二、初认识" class="headerlink" title="二、初认识"></a>二、初认识</h3><ul><li>  缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</li><li>  缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</li><li>  缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。</li></ul><h3 id="三、缓存穿透解决方案"><a href="#三、缓存穿透解决方案" class="headerlink" title="三、缓存穿透解决方案"></a>三、缓存穿透解决方案</h3><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p><strong>有很多种方法可以有效地解决缓存穿透问题</strong>，<strong>最常见</strong>的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。<strong>另外也有一个</strong>更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><p><strong>粗暴方式伪代码：</strong></p><pre><code>//伪代码public object GetProductListNew() &#123;    int cacheTime = 30;    String cacheKey = &quot;product_list&quot;;    String cacheValue = CacheHelper.Get(cacheKey);    if (cacheValue != null) &#123;        return cacheValue;    &#125;    cacheValue = CacheHelper.Get(cacheKey);    if (cacheValue != null) &#123;        return cacheValue;    &#125; else &#123;        //数据库查询不到，为空        cacheValue = GetProductListFromDB();        if (cacheValue == null) &#123;            //如果发现为空，设置个默认值，也缓存起来            cacheValue = string.Empty;        &#125;        CacheHelper.Add(cacheKey, cacheValue, cacheTime);        return cacheValue;    &#125;&#125;</code></pre><h3 id="四、缓存击穿解决方案"><a href="#四、缓存击穿解决方案" class="headerlink" title="四、缓存击穿解决方案"></a>四、缓存击穿解决方案</h3><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><p><strong>使用互斥锁(mutex key)</strong></p><p>业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。</p><p>SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。</p><pre><code>public String get(key) &#123;      String value = redis.get(key);      if (value == null) &#123; //代表缓存值过期          //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db      if (redis.setnx(key_mutex, 1, 3 * 60) == 1) &#123;  //代表设置成功               value = db.get(key);                      redis.set(key, value, expire_secs);                      redis.del(key_mutex);              &#125; else &#123;  //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可                      sleep(50);                      get(key);  //重试              &#125;          &#125; else &#123;              return value;                &#125; &#125;</code></pre><p>memcache代码：</p><pre><code>if (memcache.get(key) == null) &#123;      // 3 min timeout to avoid mutex holder crash      if (memcache.add(key_mutex, 3 * 60 * 1000) == true) &#123;          value = db.get(key);          memcache.set(key, value);          memcache.delete(key_mutex);      &#125; else &#123;          sleep(50);          retry();      &#125;  &#125;</code></pre><p><strong>其它方案：待各位补充。</strong></p><h3 id="五、缓存雪崩解决方案"><a href="#五、缓存雪崩解决方案" class="headerlink" title="五、缓存雪崩解决方案"></a>五、缓存雪崩解决方案</h3><p>与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key。</p><p>缓存正常从Redis中获取，示意图如下：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/W5Wzice6Iz7gSqQ4UoogMtkSMWGWgynS8GtMu35osT9yED1ZE5CCjj0t5E7wPdU01zpMqc6rkYUiabID3YhFz1Lw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="redis1.md" title="redis1.md"></p><p>缓存失效瞬间示意图如下：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/W5Wzice6Iz7gSqQ4UoogMtkSMWGWgynS8oQtvBSortCptOZwgeUyJ6a69Aib1GEVl6vLKwY7TyVWOJHBfNPyWSpg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="redis2.md" title="redis2.md"></p><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！大多数系统设计者考虑用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。还有一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><p><strong>加锁排队，伪代码如下：</strong></p><pre><code>//伪代码public object GetProductListNew() &#123;    int cacheTime = 30;    String cacheKey = &quot;product_list&quot;;    String lockKey = cacheKey;    String cacheValue = CacheHelper.get(cacheKey);    if (cacheValue != null) &#123;        return cacheValue;    &#125; else &#123;        synchronized(lockKey) &#123;            cacheValue = CacheHelper.get(cacheKey);            if (cacheValue != null) &#123;                return cacheValue;            &#125; else &#123;              //这里一般是sql查询数据                cacheValue = GetProductListFromDB();                 CacheHelper.Add(cacheKey, cacheValue, cacheTime);            &#125;        &#125;        return cacheValue;    &#125;&#125;</code></pre><p>加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时，这是个治标不治本的方法！</p><p>注意：加锁排队的解决方式分布式环境的并发问题，有可能还要解决分布式锁的问题；线程还会被阻塞，用户体验很差！因此，在真正的高并发场景下很少使用！</p><p><strong>随机值伪代码：</strong></p><pre><code>//伪代码public object GetProductListNew() &#123;    int cacheTime = 30;    String cacheKey = &quot;product_list&quot;;    //缓存标记    String cacheSign = cacheKey + &quot;_sign&quot;;    String sign = CacheHelper.Get(cacheSign);    //获取缓存值    String cacheValue = CacheHelper.Get(cacheKey);    if (sign != null) &#123;        return cacheValue; //未过期，直接返回    &#125; else &#123;        CacheHelper.Add(cacheSign, &quot;1&quot;, cacheTime);        ThreadPool.QueueUserWorkItem((arg) -&gt; &#123;      //这里一般是 sql查询数据            cacheValue = GetProductListFromDB();           //日期设缓存时间的2倍，用于脏读          CacheHelper.Add(cacheKey, cacheValue, cacheTime * 2);                         &#125;);        return cacheValue;    &#125;&#125; </code></pre><p><strong>解释说明：</strong></p><ul><li>  缓存标记：记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新实际key的缓存；</li><li>  缓存数据：它的过期时间比缓存标记的时间延长1倍，例：标记缓存时间30分钟，数据缓存设置为60分钟。这样，当缓存标记key过期后，实际缓存还能把旧数据返回给调用端，直到另外的线程在后台更新完成后，才会返回新缓存。</li></ul><p>关于缓存崩溃的解决方法，这里提出了三种方案：使用锁或队列、设置过期标志更新缓存、为key设置不同的缓存失效时间，还有一种被称为“二级缓存”的解决方法。</p><h3 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h3><p>针对业务系统，永远都是具体情况具体分析，没有最好，只有最合适。</p><p>于缓存其它问题，缓存满了和数据丢失等问题，大伙可自行学习。最后也提一下三个词LRU、RDB、AOF，通常我们采用LRU策略处理溢出，Redis的RDB和AOF持久化策略来保证一定情况下的数据安全。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="redis" scheme="http://gqs666.gq/categories/redis/"/>
    
    
    <category term="-redis -缓存" scheme="http://gqs666.gq/tags/redis-%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>maven项目创建过慢与idea常用快捷键</title>
    <link href="http://gqs666.gq/2020/10/28/article03/"/>
    <id>http://gqs666.gq/2020/10/28/article03/</id>
    <published>2020-10-28T04:31:57.000Z</published>
    <updated>2020-11-05T02:08:47.521Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>archetypeCatalog<br>internal</p><p>idea常用的快捷键</p><p>Alt+回车 导入包,自动修正</p><p>Ctrl+N   查找类</p><p>Ctrl+Shift+N 查找文件</p><p>Ctrl+Alt+L  格式化代码</p><p>Ctrl+Alt+O 优化导入的类和包</p><p>Alt+Insert 生成代码(如get,set方法,构造函数等)</p><p>Ctrl+E或者Alt+Shift+C  最近更改的代码</p><p>Ctrl+R 替换文本</p><p>Ctrl+F 查找文本</p><p>Ctrl+Shift+Space 自动补全代码</p><p>Ctrl+空格 代码提示</p><p>Ctrl+Alt+Space 类名或接口名提示</p><p>Ctrl+P 方法参数提示</p><p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p><p>Alt+Shift+C 对比最近修改的代码</p><p>Shift+F6  重构-重命名</p><p>Ctrl+Shift+先上键</p><p>Ctrl+X 删除行</p><p>Ctrl+D 复制行</p><p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）</p><p>Ctrl+J  自动代码</p><p>Ctrl+E 最近打开的文件</p><p>Ctrl+H 显示类结构图</p><p>Ctrl+Q 显示注释文档</p><p>Alt+F1 查找代码所在位置</p><p>Alt+1 快速打开或隐藏工程面板</p><p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p><p>Alt+ left/right 切换代码视图</p><p>Alt+ Up/Down 在方法间快速移动定位</p><p>Ctrl+Shift+Up/Down 代码向上/下移动。</p><p>F2 或Shift+F2 高亮错误或警告快速定位</p><p>代码标签输入完成后，按Tab，生成代码。</p><p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p><p>Ctrl+W 选中代码，连续按会有其他效果</p><p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p><p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p><p>Ctrl+B 快速打开光标处的类或方法 </p><p>Intellij IDEA最常用快捷键</p><p>1.Ctrl＋E，可以显示最近编辑的文件列表</p><p>2.Shift＋Click可以关闭文件</p><p>3.Ctrl＋[或]可以跳到大括号的开头结尾</p><p>4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方</p><p>5.Ctrl＋F12，可以显示当前文件的结构</p><p>6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择</p><p>7.Ctrl＋N，可以快速打开类</p><p>8.Ctrl＋Shift＋N，可以快速打开文件</p><p>9.Alt＋Q可以看到当前方法的声明</p><p>10.Ctrl＋W可以选择单词继而语句继而行继而函数</p><p>11.Alt＋F1可以将正在编辑的元素在各个面板中定位</p><p>12.Ctrl＋P，可以显示参数信息</p><p>13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入</p><p>14.Alt＋Insert可以生成构造器/Getter/Setter等</p><p>15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量</p><p>16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch</p><p>17.Alt＋Up and Alt＋Down可在方法间快速移动</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="idea" scheme="http://gqs666.gq/categories/idea/"/>
    
    
    <category term="idea" scheme="http://gqs666.gq/tags/idea/"/>
    
    <category term="maven" scheme="http://gqs666.gq/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>IDEA2020版Maven依赖成功导入但任然报错找不到包解决方案</title>
    <link href="http://gqs666.gq/2020/10/27/article01/"/>
    <id>http://gqs666.gq/2020/10/27/article01/</id>
    <published>2020-10-27T04:31:57.000Z</published>
    <updated>2020-11-05T02:08:30.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近换了新的idea版本，在使用maven联系springboot项目的时候，pom.xml中的依赖正确，点击运行按钮，报错找不到包</p><p>（例如：Error:(4, 52) java: 程序包org.springframework.beans.factory.annotation不存在），ctrl+鼠标左键却能定位到jar包（说明jar成功导入）<br /><img src="https://img-blog.csdnimg.cn/20200609114221753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA1ODQ3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />报错原因：<br />IDEA启动程序按钮和maven的build使用的jar包环境不一样<br />解决方案：<br />设置idea构建/运行操作委托给maven就行了。具体设置：<br />Settings搜索Runner,勾选delegate ide build/run actions to maven</p><p><img src="https://img-blog.csdnimg.cn/2020060911432970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA1ODQ3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />还要注意编码是否设置UTF-8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="遇到的问题" scheme="http://gqs666.gq/categories/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="idea" scheme="http://gqs666.gq/tags/idea/"/>
    
    <category term="maven" scheme="http://gqs666.gq/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>一招解决GitHub致命的下载速度</title>
    <link href="http://gqs666.gq/2020/10/21/article04/"/>
    <id>http://gqs666.gq/2020/10/21/article04/</id>
    <published>2020-10-21T01:31:57.000Z</published>
    <updated>2020-11-05T02:09:11.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>通过码云来导入github，通过码云下载</p></blockquote><p>第一步：<br /><strong>找一个你需要下载的GitHub项目</strong><img src="https://img-blog.csdnimg.cn/20200328093031557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>第二步：<br />复制链接</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093109637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>第三步：<br />打开码云，然后选择从GitHub导入</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093143714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>第四步：<br />复制刚才的连接，起个名字，点击导入</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093223266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br /><strong>这个过程大概一两分钟</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093315682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>导入完成：直接下载zip<br /><img src="https://img-blog.csdnimg.cn/20200328093348780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>一个完整的过程动图<br /><img src="https://img-blog.csdnimg.cn/20200328094952899.gif" alt="在这里插入图片描述" /></p><h2><a id="PS_gitgitconfigremoteoriginurlgiteegithub_34"></a><code>PS： 如需更改git中的项目，打开你的项目，找到隐藏的文件夹git，记事本打开config，然后把remote"origin"中的url的gitee改成github</code></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="http://gqs666.gq/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="github" scheme="http://gqs666.gq/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Word转MD文件</title>
    <link href="http://gqs666.gq/2020/10/16/article02/"/>
    <id>http://gqs666.gq/2020/10/16/article02/</id>
    <published>2020-10-16T04:31:57.000Z</published>
    <updated>2020-11-05T02:08:34.773Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>把网页的内容全部复制，丢进下面的网站，转为html格式，复制html代码文本<br /><a href="https://wordhtml.com/">WordHtml</a><br />把代码文本放在这里<br /><a href="https://tool.lu/markdown/">Html转MD</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="http://gqs666.gq/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="markdown" scheme="http://gqs666.gq/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>试Linux端口的连通性的四种方法</title>
    <link href="http://gqs666.gq/2020/09/27/aa/"/>
    <id>http://gqs666.gq/2020/09/27/aa/</id>
    <published>2020-09-27T04:31:57.000Z</published>
    <updated>2020-11-05T02:10:04.693Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="测试Linux端口的连通性的四种方法"><a href="#测试Linux端口的连通性的四种方法" class="headerlink" title="测试Linux端口的连通性的四种方法"></a>测试Linux端口的连通性的四种方法</h1><p>Linux系统有时候需要测试某个端口的连通性,用户可以参考如下方法来测试。</p><h2 id="方法一、telnet法"><a href="#方法一、telnet法" class="headerlink" title="方法一、telnet法"></a><strong>方法一、telnet法</strong></h2><p> telnet为用户提供了在本地计算机上完成远程主机工作的能力,因此可以通过telnet来测试端口的连通性,具体用法格式:</p><p><strong>telnet ip port</strong> </p><p>说明:</p><p><strong>ip:</strong> 是测试主机的ip地址</p><p><strong>port:</strong> 是端口,比如80</p><p>如果telnet连接不存在的端口,那会如下图所示。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/009e68cdd64f3476b58d5eabffc28cf7.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><p>如果telnet 连接存在端口会出现如下图所示的内容,下图中以80端口为例。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/71ef79d150a5e8a63e92d7889250cce2.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><h2 id="方法二、ssh法"><a href="#方法二、ssh法" class="headerlink" title="方法二、ssh法"></a><strong>方法二、ssh法</strong></h2><p>SSH 是目前较可靠,专为远程登录会话和其他网络服务提供安全性的协议,在linux上可以通过ssh命令来测试端口的连通性,具体用法格式如下:</p><p>用法: <strong>ssh -v -p port <a href="https://www.aliyun.com/jiaocheng/129726.html">aliyunzixun@xxx.com</a></strong></p><p>说明:</p><p><strong>-v</strong>调试模式(会打印日志).</p><p><strong>-p</strong>指定端口</p><p><strong>username:</strong> 远程主机的登录用户</p><p><strong>ip:</strong> 远程主机</p><p>如果远程主机开通了相应的端口,会有如下图所示的建立成功的提示。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/8abd5ae20d0dd5cbc33095047fdc7d4a.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><p>如果远程主机没有开通相应的端口,则如下图所示</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/30bb7641ce29a897d8b344efa783d085.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><h2 id="方法三、curl法"><a href="#方法三、curl法" class="headerlink" title="方法三、curl法"></a><strong>方法三、curl法</strong></h2><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。也可以用来测试端口的连通性,具体用法:</p><p><strong>curl ip:port</strong></p><p>说明:</p><p><strong>ip</strong>:是测试主机的ip地址</p><p><strong>port:</strong> 是端口,比如80</p><p>如果远程主机开通了相应的端口,都会输出信息,如果没有开通相应的端口,则没有任何提示,需要CTRL+C断开。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/3603623912d03932de77f6830910b340.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><h2 id="方法四、wget方法"><a href="#方法四、wget方法" class="headerlink" title="方法四、wget方法"></a><strong>方法四、wget方法</strong></h2><p>wget是一个从网络上自动下载文件的自由工具**,支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载**,并可以使用HTTP代理。wget名称的由来是<strong>“World Wide Web”与“get”的结</strong>合,它也可以用来测试端口的连通性具体用法:</p><p><strong>wget ip:port</strong></p><p>说明:</p><p><strong>ip:</strong> 是测试主机的ip地址</p><p><strong>port:</strong> 是端口,比如80</p><p>如果远程主机不存在端口则会一直提示连接主机。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/192fd66f1b2d3b22a0941e78627c50c5.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><p>如果远程主机存在端口则会看到相应的信息,如下图所示。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/06f1b33f8702a1aa0ffa41166606a96a.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="http://gqs666.gq/categories/linux/"/>
    
    
    <category term="linux" scheme="http://gqs666.gq/tags/linux/"/>
    
    <category term="运维" scheme="http://gqs666.gq/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
