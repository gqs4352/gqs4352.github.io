<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小龚の博客</title>
  
  <subtitle>守破离</subtitle>
  <link href="http://blog.52pq.cn/atom.xml" rel="self"/>
  
  <link href="http://blog.52pq.cn/"/>
  <updated>2021-05-30T06:34:14.136Z</updated>
  <id>http://blog.52pq.cn/</id>
  
  <author>
    <name>Mr.G</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JWT详细教程与使用</title>
    <link href="http://blog.52pq.cn/2021/05/30/JWT%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.52pq.cn/2021/05/30/JWT%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-30T05:19:28.000Z</published>
    <updated>2021-05-30T06:34:14.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JWT详细教程与使用"><a href="#JWT详细教程与使用" class="headerlink" title="JWT详细教程与使用"></a>JWT详细教程与使用</h1><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><blockquote><p>JSON Web Token（JSON Web令牌）</p></blockquote><blockquote><p>是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。</p></blockquote><blockquote><p>通过JSON形式作为Web应用中的令牌，用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</p></blockquote><ul><li>JWT作用：<ul><li>  授权：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的域中使用。如：单点登录。</li><li>  信息交换：在各方之间安全地传输信息。JWT可进行签名（如使用公钥/私钥对)，因此可确保发件人。由于签名是使用标头和有效负载计算的，因此还可验证内容是否被篡改。</li></ul></li></ul><h2 id="1-传统Session"><a href="#1-传统Session" class="headerlink" title="1.传统Session"></a>1.传统Session</h2><h3 id="1-1-认证方式"><a href="#1-1-认证方式" class="headerlink" title="1.1.认证方式"></a>1.1.认证方式</h3><p>http协议本身是一种无状态的协议，如果用户向服务器提供了用户名和密码来进行用户认证，下次请求时，用户还要再一次进行用户认证才行。因为根据http协议，服务器并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储─份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样应用就能识别请求来自哪个用户。</p><p><img src="https://img-blog.csdnimg.cn/20201029154819357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="1-2-暴露的问题"><a href="#1-2-暴露的问题" class="headerlink" title="1.2.暴露的问题"></a>1.2.暴露的问题</h3><ul><li><p>  用户经过应用认证后，应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大；</p></li><li><p>  用户认证后，服务端做认证记录，如果认证的记录被保存在内存中的话，用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源。在分布式的应用上，限制了负载均衡器的能力。以此限制了应用的扩展能力；</p></li><li><p>  session是基于cookie来进行用户识别，cookie如果被截获，用户很容易受到CSRF（跨站伪造请求攻击)攻击；</p></li><li><p>在前后端分离系统中应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session每次携带sessionid到服务<br>  器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。</p></li></ul><h2 id="2-JWT认证"><a href="#2-JWT认证" class="headerlink" title="2.JWT认证"></a>2.JWT认证</h2><p><img src="https://img-blog.csdnimg.cn/20201029154848467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="2-1-认证流程"><a href="#2-1-认证流程" class="headerlink" title="2.1.认证流程"></a>2.1.认证流程</h3><ul><li>  前端通过Web表单将自己的用户名和密码发送到后端的接口。该过程一般是HTTP的POST请求。建议的方式是通过SSL加密的传输(https协议)，从而避免敏感信息被嗅探。</li><li>  后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload(负载)，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。</li><li>  后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage（浏览器本地缓存）或sessionStorage（session缓存）上，退出登录时前端删除保存的JWT即可。</li><li>  前端在每次请求时将JWT放入HTTP的Header中的Authorization位。(解决XSS和XSRF问题）HEADER</li><li>  后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确﹔检查Token是否过期;检查Token的接收方是否是自己(可选）</li><li>  ·验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</li></ul><h3 id="2-2-JWT优点"><a href="#2-2-JWT优点" class="headerlink" title="2.2.JWT优点"></a>2.2.JWT优点</h3><ul><li>  简洁(Compact)：可以通过URL，POST参数或者在HTTP header发送，数据量小，传输速度也很快；</li><li>  自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库；</li><li>  Token是以JSON加密的形式保存在客户端，所以JWT是跨语言的，原则上任何web形式都支持。</li><li>  不需要在服务端保存会话信息，特别适用于分布式微服务。I</li></ul><h2 id="3-JWT结构"><a href="#3-JWT结构" class="headerlink" title="3.JWT结构"></a>3.JWT结构</h2><blockquote><p>就是令牌token，是一个String字符串，由3部分组成，中间用点隔开</p></blockquote><blockquote><p>令牌组成：</p><ol><li> 标头（Header）</li><li> 有效载荷（Payload）</li><li> 签名（Signature）</li></ol><p>token格式：head.payload.singurater 如：xxxxx.yyyy.zzzz</p></blockquote><ul><li><p>Header：有令牌的类型和所使用的签名算法，如HMAC、SHA256、RSA；使用Base64编码组成；（Base64是一种编码，不是一种加密过程，可以被翻译成原来的样子）</p><pre><code>  &#123;      &quot;alg&quot; : &quot;HS256&quot;,      &quot;type&quot; : &quot;JWT&quot;  &#125;</code></pre></li></ul><ul><li><p>Payload ：有效负载，包含声明；声明是有关实体（通常是用户）和其他数据的声明，不放用户敏感的信息，如密码。同样使用Base64编码</p><pre><code>  &#123;      &quot;sub&quot; : &quot;123&quot;,      &quot;name&quot; : &quot;John Do&quot;,      &quot;admin&quot; : true  &#125;</code></pre></li></ul><ul><li><p>Signature ：前面两部分都使用Base64进行编码，前端可以解开知道里面的信息。Signature需要使用编码后的header和payload<br>  加上我们提供的一个密钥，使用header中指定的签名算法(HS256)进行签名。签名的作用是保证JWT没有被篡改过</p><pre><code>  HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret);</code></pre></li></ul><pre><code>&gt; **签名目的：**签名的过程实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。&gt; 信息安全问题：Base64是一种编码，是可逆的，适合传递一些非敏感信息；JWT中不应该在负载中加入敏感的数据。如传输用户的ID被知道也是安全的，如密码不能放在JWT中；JWT常用于设计用户认证、授权系统、web的单点登录。</code></pre><p><img src="https://img-blog.csdnimg.cn/20201029154920267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="4-JWT使用"><a href="#4-JWT使用" class="headerlink" title="4.JWT使用"></a>4.JWT使用</h2><h3 id="4-1-引入依赖"><a href="#4-1-引入依赖" class="headerlink" title="4.1.引入依赖"></a>4.1.引入依赖</h3><pre><code>&lt;!--引入JWT--&gt;&lt;dependency&gt;    &lt;groupId&gt;com.auth0&lt;/groupId&gt;    &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;    &lt;version&gt;3.10.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="4-2-生成token"><a href="#4-2-生成token" class="headerlink" title="4.2.生成token"></a>4.2.生成token</h3><pre><code>HashMap&lt;String,Object&gt; map = new HashMap&lt;&gt;();        Calendar instance = Calendar.getInstance();        instance.add(Calendar.SECOND,20);        String token = JWT.create()                .withHeader(map) //可以不设定，就是使用默认的                .withClaim(&quot;userId&quot;,20)//payload  //自定义用户名                .withClaim(&quot;username&quot;,&quot;zhangsan&quot;)                .withExpiresAt(instance.getTime()) //指定令牌过期时间                .sign(Algorithm.HMAC256(&quot;fdahuifeuw78921&quot;));//签名</code></pre><h3 id="4-3-根据令牌和签名解析数据"><a href="#4-3-根据令牌和签名解析数据" class="headerlink" title="4.3.根据令牌和签名解析数据"></a>4.3.根据令牌和签名解析数据</h3><pre><code>JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(&quot;fdahuif921&quot;)).build();        DecodedJWT decodedJWT = jwtVerifier.verify(token);        decodedJWT.getClaim(&quot;userId&quot;).asInt();//获取负载里面对应的内容        decodedJWT.getClaim(&quot;username&quot;).asString();        decodedJWT.getExpiresAt();//获取过期时间</code></pre><h3 id="4-4-常见异常信息"><a href="#4-4-常见异常信息" class="headerlink" title="4.4.常见异常信息"></a>4.4.常见异常信息</h3><pre><code>SignatureVerificationException //签名不一致异常TokenExpiredException //令牌过期异常AlgorithmMismatchException //算法不匹配异常InvalidClaimException //失效的payload异常（传给客户端后，token被改动，验证不一致）</code></pre><h2 id="5-封装工具类"><a href="#5-封装工具类" class="headerlink" title="5.封装工具类"></a>5.封装工具类</h2><pre><code>public class JWTUtils &#123;    private static String SIGNATURE = &quot;token!@#$%^7890&quot;;    /**     * 生成token     * @param map //传入payload     * @return 返回token     */    public static String getToken(Map&lt;String,String&gt; map)&#123;        JWTCreator.Builder builder = JWT.create();        map.forEach((k,v)-&gt;&#123;            builder.withClaim(k,v);        &#125;);        Calendar instance = Calendar.getInstance();        instance.add(Calendar.SECOND,7);        builder.withExpiresAt(instance.getTime());        return builder.sign(Algorithm.HMAC256(SIGNATURE)).toString();    &#125;    /**     * 验证token     * @param token     */    public static void verify(String token)&#123;        JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);    &#125;    /**     * 获取token中payload     * @param token     * @return     */    public static DecodedJWT getToken(String token)&#123;        return JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);    &#125;&#125;</code></pre><h2 id="6-SpringBoot整合JWT"><a href="#6-SpringBoot整合JWT" class="headerlink" title="6.SpringBoot整合JWT"></a>6.SpringBoot整合JWT</h2><h3 id="6-1-登录时生成token"><a href="#6-1-登录时生成token" class="headerlink" title="6.1.登录时生成token"></a>6.1.登录时生成token</h3><pre><code>//controller层接收数据，生成token，并响应Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();try&#123;    User userDB = userService.login(user);    Map&lt;String,String&gt; payload = new HashMap&lt;&gt;();    payload.put(&quot;id&quot;,userDB.getId());    payload.put(&quot;name&quot;,userDB.getName());    //生成JWT令牌    String token = JWTUtils.getToken(payload);    map.put(&quot;state&quot;,true);    map.put(&quot;msg&quot;,&quot;认证成功&quot;);    map.put(&quot;token&quot;,token);//响应token&#125; catch (Exception e) &#123;    map.put(&quot;state&quot;,&quot;false&quot;);    map.put(&quot;msg&quot;,e.getMessage());&#125;</code></pre><h3 id="6-2-声明一个token拦截器类"><a href="#6-2-声明一个token拦截器类" class="headerlink" title="6.2.声明一个token拦截器类"></a>6.2.声明一个token拦截器类</h3><pre><code>package com.liup.interceptor;import com.auth0.jwt.exceptions.AlgorithmMismatchException;import com.auth0.jwt.exceptions.SignatureVerificationException;import com.auth0.jwt.exceptions.TokenExpiredException;import com.fasterxml.jackson.databind.ObjectMapper;import com.office.utils.JWTUtils;import org.springframework.web.servlet.HandlerInterceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.HashMap;import java.util.Map;/** * JWT验证拦截器 */public class JWTInterceptor implements HandlerInterceptor &#123;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        //令牌建议是放在请求头中，获取请求头中令牌        String token = request.getHeader(&quot;token&quot;);        try&#123;            JWTUtils.verify(token);//验证令牌            return true;//放行请求        &#125; catch (SignatureVerificationException e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;无效签名&quot;);        &#125; catch (TokenExpiredException e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;token过期&quot;);        &#125; catch (AlgorithmMismatchException e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;token算法不一致&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;token失效&quot;);        &#125;        map.put(&quot;state&quot;,false);//设置状态        //将map转化成json，response使用的是Jackson        String json = new ObjectMapper().writeValueAsString(map);        response.setContentType(&quot;application/json;charset=UTF-8&quot;);        response.getWriter().print(json);        return false;    &#125;&#125;</code></pre><h3 id="6-3-配置拦截器"><a href="#6-3-配置拦截器" class="headerlink" title="6.3.配置拦截器"></a>6.3.配置拦截器</h3><pre><code>package com.liup.config;import com.office.interceptor.JWTInterceptor;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class InterceptorConfig implements WebMvcConfigurer &#123;    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;        registry.addInterceptor(new JWTInterceptor())                .addPathPatterns(&quot;/**&quot;)                .excludePathPatterns(&quot;/user/**&quot;);    &#125;&#125;JWT</code></pre><p>===</p><blockquote><p>JSON Web Token（JSON Web令牌）</p></blockquote><blockquote><p>是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。</p></blockquote><blockquote><p>通过JSON形式作为Web应用中的令牌，用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</p></blockquote><ul><li>JWT作用：<ul><li>  授权：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的域中使用。如：单点登录。</li><li>  信息交换：在各方之间安全地传输信息。JWT可进行签名（如使用公钥/私钥对)，因此可确保发件人。由于签名是使用标头和有效负载计算的，因此还可验证内容是否被篡改。</li></ul></li></ul><h2 id="1-传统Session-1"><a href="#1-传统Session-1" class="headerlink" title="1.传统Session"></a>1.传统Session</h2><h3 id="1-1-认证方式-1"><a href="#1-1-认证方式-1" class="headerlink" title="1.1.认证方式"></a>1.1.认证方式</h3><p>http协议本身是一种无状态的协议，如果用户向服务器提供了用户名和密码来进行用户认证，下次请求时，用户还要再一次进行用户认证才行。因为根据http协议，服务器并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储─份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样应用就能识别请求来自哪个用户。</p><p><img src="https://img-blog.csdnimg.cn/20201029154819357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center" alt="[ (img-RJA4mCJy-1603957559914)(E:%5CLiuPengLearn%5CLiuP%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF%5CJava%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88%5CJWT%5Cimages%5Cimage-20200917191552836.png)]"></p><h3 id="1-2-暴露的问题-1"><a href="#1-2-暴露的问题-1" class="headerlink" title="1.2.暴露的问题"></a>1.2.暴露的问题</h3><ul><li><p>  用户经过应用认证后，应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大；</p></li><li><p>  用户认证后，服务端做认证记录，如果认证的记录被保存在内存中的话，用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源。在分布式的应用上，限制了负载均衡器的能力。以此限制了应用的扩展能力；</p></li><li><p>  session是基于cookie来进行用户识别，cookie如果被截获，用户很容易受到CSRF（跨站伪造请求攻击)攻击；</p></li><li><p>在前后端分离系统中应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session每次携带sessionid到服务<br>  器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。</p></li></ul><h2 id="2-JWT认证-1"><a href="#2-JWT认证-1" class="headerlink" title="2.JWT认证"></a>2.JWT认证</h2><p><img src="https://img-blog.csdnimg.cn/20201029154848467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center" alt="[ (img-4Njwu2Yt-1603957559915)(E:%5CLiuPengLearn%5CLiuP%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF%5CJava%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88%5CJWT%5Cimages%5Cimage-20200917201624900.png)]"></p><h3 id="2-1-认证流程-1"><a href="#2-1-认证流程-1" class="headerlink" title="2.1.认证流程"></a>2.1.认证流程</h3><ul><li>  前端通过Web表单将自己的用户名和密码发送到后端的接口。该过程一般是HTTP的POST请求。建议的方式是通过SSL加密的传输(https协议)，从而避免敏感信息被嗅探。</li><li>  后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload(负载)，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。</li><li>  后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage（浏览器本地缓存）或sessionStorage（session缓存）上，退出登录时前端删除保存的JWT即可。</li><li>  前端在每次请求时将JWT放入HTTP的Header中的Authorization位。(解决XSS和XSRF问题）HEADER</li><li>  后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确﹔检查Token是否过期;检查Token的接收方是否是自己(可选）</li><li>  ·验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</li></ul><h3 id="2-2-JWT优点-1"><a href="#2-2-JWT优点-1" class="headerlink" title="2.2.JWT优点"></a>2.2.JWT优点</h3><ul><li>  简洁(Compact)：可以通过URL，POST参数或者在HTTP header发送，数据量小，传输速度也很快；</li><li>  自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库；</li><li>  Token是以JSON加密的形式保存在客户端，所以JWT是跨语言的，原则上任何web形式都支持。</li><li>  不需要在服务端保存会话信息，特别适用于分布式微服务。I</li></ul><h2 id="3-JWT结构-1"><a href="#3-JWT结构-1" class="headerlink" title="3.JWT结构"></a>3.JWT结构</h2><blockquote><p>就是令牌token，是一个String字符串，由3部分组成，中间用点隔开</p></blockquote><blockquote><p>令牌组成：</p><ol><li> 标头（Header）</li><li> 有效载荷（Payload）</li><li> 签名（Signature）</li></ol><p>token格式：head.payload.singurater 如：xxxxx.yyyy.zzzz</p></blockquote><ul><li><p>Header：有令牌的类型和所使用的签名算法，如HMAC、SHA256、RSA；使用Base64编码组成；（Base64是一种编码，不是一种加密过程，可以被翻译成原来的样子）</p><pre><code>  &#123;      &quot;alg&quot; : &quot;HS256&quot;,      &quot;type&quot; : &quot;JWT&quot;  &#125;</code></pre></li></ul><ul><li><p>Payload ：有效负载，包含声明；声明是有关实体（通常是用户）和其他数据的声明，不放用户敏感的信息，如密码。同样使用Base64编码</p><pre><code>  &#123;      &quot;sub&quot; : &quot;123&quot;,      &quot;name&quot; : &quot;John Do&quot;,      &quot;admin&quot; : true  &#125;</code></pre></li></ul><ul><li><p>Signature ：前面两部分都使用Base64进行编码，前端可以解开知道里面的信息。Signature需要使用编码后的header和payload<br>  加上我们提供的一个密钥，使用header中指定的签名算法(HS256)进行签名。签名的作用是保证JWT没有被篡改过</p><pre><code>  HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret);</code></pre></li></ul><pre><code>&gt; **签名目的：**签名的过程实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。&gt; 信息安全问题：Base64是一种编码，是可逆的，适合传递一些非敏感信息；JWT中不应该在负载中加入敏感的数据。如传输用户的ID被知道也是安全的，如密码不能放在JWT中；JWT常用于设计用户认证、授权系统、web的单点登录。</code></pre><p><img src="https://img-blog.csdnimg.cn/20201029154920267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center" alt="[ (img-nujtvnmx-1603957559917)(E:%5CLiuPengLearn%5CLiuP%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF%5CJava%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88%5CJWT%5Cimages%5Cimage-20200917215042100.png)]"></p><h2 id="4-JWT使用-1"><a href="#4-JWT使用-1" class="headerlink" title="4.JWT使用"></a>4.JWT使用</h2><h3 id="4-1-引入依赖-1"><a href="#4-1-引入依赖-1" class="headerlink" title="4.1.引入依赖"></a>4.1.引入依赖</h3><pre><code>&lt;!--引入JWT--&gt;&lt;dependency&gt;    &lt;groupId&gt;com.auth0&lt;/groupId&gt;    &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;    &lt;version&gt;3.10.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="4-2-生成token-1"><a href="#4-2-生成token-1" class="headerlink" title="4.2.生成token"></a>4.2.生成token</h3><pre><code>HashMap&lt;String,Object&gt; map = new HashMap&lt;&gt;();        Calendar instance = Calendar.getInstance();        instance.add(Calendar.SECOND,20);        String token = JWT.create()                .withHeader(map) //可以不设定，就是使用默认的                .withClaim(&quot;userId&quot;,20)//payload  //自定义用户名                .withClaim(&quot;username&quot;,&quot;zhangsan&quot;)                .withExpiresAt(instance.getTime()) //指定令牌过期时间                .sign(Algorithm.HMAC256(&quot;fdahuifeuw78921&quot;));//签名</code></pre><h3 id="4-3-根据令牌和签名解析数据-1"><a href="#4-3-根据令牌和签名解析数据-1" class="headerlink" title="4.3.根据令牌和签名解析数据"></a>4.3.根据令牌和签名解析数据</h3><pre><code>JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(&quot;fdahuif921&quot;)).build();        DecodedJWT decodedJWT = jwtVerifier.verify(token);        decodedJWT.getClaim(&quot;userId&quot;).asInt();//获取负载里面对应的内容        decodedJWT.getClaim(&quot;username&quot;).asString();        decodedJWT.getExpiresAt();//获取过期时间</code></pre><h3 id="4-4-常见异常信息-1"><a href="#4-4-常见异常信息-1" class="headerlink" title="4.4.常见异常信息"></a>4.4.常见异常信息</h3><pre><code>SignatureVerificationException //签名不一致异常TokenExpiredException //令牌过期异常AlgorithmMismatchException //算法不匹配异常InvalidClaimException //失效的payload异常（传给客户端后，token被改动，验证不一致）</code></pre><h2 id="5-封装工具类-1"><a href="#5-封装工具类-1" class="headerlink" title="5.封装工具类"></a>5.封装工具类</h2><pre><code>public class JWTUtils &#123;    private static String SIGNATURE = &quot;token!@#$%^7890&quot;;    /**     * 生成token     * @param map //传入payload     * @return 返回token     */    public static String getToken(Map&lt;String,String&gt; map)&#123;        JWTCreator.Builder builder = JWT.create();        map.forEach((k,v)-&gt;&#123;            builder.withClaim(k,v);        &#125;);        Calendar instance = Calendar.getInstance();        instance.add(Calendar.SECOND,7);        builder.withExpiresAt(instance.getTime());        return builder.sign(Algorithm.HMAC256(SIGNATURE)).toString();    &#125;    /**     * 验证token     * @param token     */    public static void verify(String token)&#123;        JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);    &#125;    /**     * 获取token中payload     * @param token     * @return     */    public static DecodedJWT getToken(String token)&#123;        return JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);    &#125;&#125;</code></pre><h2 id="6-SpringBoot整合JWT-1"><a href="#6-SpringBoot整合JWT-1" class="headerlink" title="6.SpringBoot整合JWT"></a>6.SpringBoot整合JWT</h2><h3 id="6-1-登录时生成token-1"><a href="#6-1-登录时生成token-1" class="headerlink" title="6.1.登录时生成token"></a>6.1.登录时生成token</h3><pre><code>//controller层接收数据，生成token，并响应Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();try&#123;    User userDB = userService.login(user);    Map&lt;String,String&gt; payload = new HashMap&lt;&gt;();    payload.put(&quot;id&quot;,userDB.getId());    payload.put(&quot;name&quot;,userDB.getName());    //生成JWT令牌    String token = JWTUtils.getToken(payload);    map.put(&quot;state&quot;,true);    map.put(&quot;msg&quot;,&quot;认证成功&quot;);    map.put(&quot;token&quot;,token);//响应token&#125; catch (Exception e) &#123;    map.put(&quot;state&quot;,&quot;false&quot;);    map.put(&quot;msg&quot;,e.getMessage());&#125;</code></pre><h3 id="6-2-声明一个token拦截器类-1"><a href="#6-2-声明一个token拦截器类-1" class="headerlink" title="6.2.声明一个token拦截器类"></a>6.2.声明一个token拦截器类</h3><pre><code>package com.liup.interceptor;import com.auth0.jwt.exceptions.AlgorithmMismatchException;import com.auth0.jwt.exceptions.SignatureVerificationException;import com.auth0.jwt.exceptions.TokenExpiredException;import com.fasterxml.jackson.databind.ObjectMapper;import com.office.utils.JWTUtils;import org.springframework.web.servlet.HandlerInterceptor;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.HashMap;import java.util.Map;/** * JWT验证拦截器 */public class JWTInterceptor implements HandlerInterceptor &#123;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        //令牌建议是放在请求头中，获取请求头中令牌        String token = request.getHeader(&quot;token&quot;);        try&#123;            JWTUtils.verify(token);//验证令牌            return true;//放行请求        &#125; catch (SignatureVerificationException e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;无效签名&quot;);        &#125; catch (TokenExpiredException e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;token过期&quot;);        &#125; catch (AlgorithmMismatchException e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;token算法不一致&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();            map.put(&quot;msg&quot;,&quot;token失效&quot;);        &#125;        map.put(&quot;state&quot;,false);//设置状态        //将map转化成json，response使用的是Jackson        String json = new ObjectMapper().writeValueAsString(map);        response.setContentType(&quot;application/json;charset=UTF-8&quot;);        response.getWriter().print(json);        return false;    &#125;&#125;</code></pre><h3 id="6-3-配置拦截器-1"><a href="#6-3-配置拦截器-1" class="headerlink" title="6.3.配置拦截器"></a>6.3.配置拦截器</h3><pre><code>package com.liup.config;import com.office.interceptor.JWTInterceptor;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class InterceptorConfig implements WebMvcConfigurer &#123;    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;        registry.addInterceptor(new JWTInterceptor())                .addPathPatterns(&quot;/**&quot;)                .excludePathPatterns(&quot;/user/**&quot;);    &#125;&#125;</code></pre><h6 id="转载：blog-csdn-net-Top-L398-article-details-109361680"><a href="#转载：blog-csdn-net-Top-L398-article-details-109361680" class="headerlink" title="转载：blog.csdn.net/Top_L398/article/details/109361680"></a>转载：blog.csdn.net/Top_L398/article/details/109361680</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="http://blog.52pq.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="java" scheme="http://blog.52pq.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>超快速定位OOM</title>
    <link href="http://blog.52pq.cn/2021/03/12/%E8%B6%85%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8DOOM/"/>
    <id>http://blog.52pq.cn/2021/03/12/%E8%B6%85%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8DOOM/</id>
    <published>2021-03-12T11:08:34.000Z</published>
    <updated>2021-03-12T11:19:48.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="超快速定位OOM"><a href="#超快速定位OOM" class="headerlink" title="超快速定位OOM"></a>超快速定位OOM</h1><h2 id="什么是OOM"><a href="#什么是OOM" class="headerlink" title="什么是OOM"></a>什么是OOM</h2><p>OOM是Out Of Memory的缩写。即内存溢出。</p><h2 id="为什么会发生OOM"><a href="#为什么会发生OOM" class="headerlink" title="为什么会发生OOM"></a>为什么会发生OOM</h2><p>如果面试官问这个问题，我知道每个人都能说一大堆，但是我希望大家就回答下面三句话，言简意赅：</p><ol><li> 业务正常运行起来就需要比较多的内存，而给JVM设置的内存过小。具体表现就是程序跑不起来，或者跑一会就挂了。</li><li> GC回收内存的速度赶不上程序运行消耗内存的速度。出现这种情况一般就是往list、map中填充大量数据，内存紧张时JVM拆东墙补西墙补不过来了。所以查询记得分页啊！不需要的字段，尤其是数据量大的字段，就不要返回了！比如文章的内容。</li><li> 存在内存泄漏情况，久而久之也会造成OOM。哪些情况会造成内存泄漏呢？比如打开文件不释放、创建网络连接不关闭、不再使用的对象未断开引用关系、使用静态变量持有大对象引用……</li></ol><h2 id="哪些区域会发生OOM"><a href="#哪些区域会发生OOM" class="headerlink" title="哪些区域会发生OOM"></a>哪些区域会发生OOM</h2><p>JVM运行时数据区五个区域中，除了程序计数器不会发生OOM，其他区域都有可能。</p><p>除了元空间、本地方法栈、虚拟机栈、堆外，还有一块区域大家容易忽略，即直接内存。</p><p>不知道什么是直接内存？看这张图<br><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/08/kuangstudy640985ce-59ce-454f-88bd-80388d8c793a.jpg"></p><h2 id="JVM进程挂了，会有哪些可能性"><a href="#JVM进程挂了，会有哪些可能性" class="headerlink" title="JVM进程挂了，会有哪些可能性"></a>JVM进程挂了，会有哪些可能性</h2><p>从Windows系统角度说，JVM进程如果不是你手动关闭的，那就是OOM导致的。但是在Linux下就不一定了，因为Linux系统有一种保护机制：OOM Killer。这个机制如果展开来说又能说一堆，这里我就大概说下吧，这个机制是Unix内核独有的，它的出现是为了保证系统在可用内存较少的情况下依旧能够运行，会选择杀掉一些分值较高的进程来回收内存。这个分值是Unix内核根据一些参数动态计算出来的，当然，我们也可以改变，感兴趣的小伙伴百度学习吧。作为Java程序员，了解到这个程度基本够用了，再底层的话，很多面试官也不知道，也不敢问。^_^</p><p>除了OOM Killer，剩下的就是OOM导致JVM进程挂了。</p><h2 id="生产环境如何快速定位问题"><a href="#生产环境如何快速定位问题" class="headerlink" title="生产环境如何快速定位问题"></a>生产环境如何快速定位问题</h2><p>如果面试官问你这个问题；如果你们公司的生产环境出现过这样的问题；如果你想解决却束手无策……照着这个流程去说去做即可。</p><p>前面说了，算上直接内存，共有五个区域会发生OOM：直接内存、元空间、本地方法栈、虚拟机栈、元空间。</p><p>本地方法栈与虚拟机栈的OOM咱们可以不用管，为什么呢？因为这两个区域的OOM你在开发阶段或在测试阶段就能发现。GET到了吗？小伙伴们。所以这两个区域的OOM是不会生成dump文件的。</p><p>好，开始正题。如果生产环境JVM挂了，这时候不要慌，有节奏的来分析来排除。首先排除是不是被Linux杀死了，怎么看呢？通过命令[sudo egrep -i -r ‘Out Of’ /var/log]查看，如果是，关闭一些服务，或者把一些服务移走。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/08/kuangstudye5c9266a-0a0e-4a86-a3bc-215a84f23294.jpg"></p><p>如果不是，这时候就可以确定是OOM导致的，那具体是哪个OOM导致的呢？看有没有生成dump文件。如果生成了，要么是堆OOM，要么是元空间OOM；如果没生成，直接可以确定是直接内存导致的OOM。怎么解决呢？调优呗。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/08/kuangstudy8ccd78a6-f87d-4095-bada-4d806b10c0b3.jpg"></p><p>我这边是生成了的，所以需要进一步排查，是堆OOM还是元空间OOM。这时候需要把dump文件从服务器上下载下来，用visualvm分析。当前其他工具如MAT、JProfiler都可以，我习惯用visualvm。很多小伙伴不会看dump日志哈，子牙老师教给你诀窍，学会了，受益无穷。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/08/kuangstudy6edac809-c7e4-4dcb-9aa0-83c5b916c983.jpg"></p><p>如果你发现发生OOM的位置是创建对象，调用构造方法之类的代码，那一定是堆OOM。<init>就是构造方法的字节码格式。所以学点JVM底层知识还是有必要的啊。</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/08/kuangstudy1ad0cda6-1f37-4b68-a2d9-4659e268d720.jpg"></p><p>如果你发现发生OOM的位置是类加载器那些方法，那一定是元空间OOM。</p><p>怎么样，学会了吗？</p><p>如果发生OOM让JVM自动dump内存的设置你没开，那你可以跑路了，老板正在赶来的路上，手上拿着大刀！</p><h2 id="一些成熟的建议"><a href="#一些成熟的建议" class="headerlink" title="一些成熟的建议"></a>一些成熟的建议</h2><p>接下来才是重点，我来给你一些实战经验，让你在面试中或工作中更加自信：</p><ol><li>调优参数务必加上下面两个参数，发生OOM让JVM自动dump出内存，方便后续分析问题解决问题<br> <code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=</code></li><li> 堆内存不要设置的特别大，因为你设置的特别大，发生OOM时生成的dump文件就特别大，不好分析。建议不超过8G。</li><li> 想主动dump出JVM的内存，有挺多方式，但不管哪种方式，主动dump内存会引发STW，请择时操作。即通过arthas提供的命令heapdump主动dump出JVM的内存，这个操作会引发FGC，背后是STW，操作时请选择好时机，不然老板可能提刀来见。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="java" scheme="http://blog.52pq.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>将本地已有的一个项目上传到新建的git仓库的方法</title>
    <link href="http://blog.52pq.cn/2020/12/24/article07/"/>
    <id>http://blog.52pq.cn/2020/12/24/article07/</id>
    <published>2020-12-24T11:04:22.000Z</published>
    <updated>2021-05-30T06:21:01.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="将本地已有的一个项目上传到新建的git仓库的方法"><a href="#将本地已有的一个项目上传到新建的git仓库的方法" class="headerlink" title="将本地已有的一个项目上传到新建的git仓库的方法"></a>将本地已有的一个项目上传到新建的git仓库的方法</h1><p>将本地已有的一个非git项目上传到新建的git仓库的方法一共有两种。</p><h2 id="一、-克隆-拷贝"><a href="#一、-克隆-拷贝" class="headerlink" title="一、 克隆+拷贝"></a>一、 克隆+拷贝</h2><p>第一种方法比较简单，直接用把远程仓库拉到本地，然后再把自己本地的项目拷贝到仓库中去。然后push到远程仓库上去即可。<strong>此方法适用于本地项目不是一个git仓库的情况。</strong></p><p>具体步骤如下：</p><h4 id="1、首先克隆"><a href="#1、首先克隆" class="headerlink" title="1、首先克隆"></a>1、首先克隆</h4><pre><code>git clone git@github.com:yuanmingchen/tensorflow_study.git</code></pre><h4 id="2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中"><a href="#2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中" class="headerlink" title="2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中"></a>2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中</h4><h4 id="3、最后push到远程仓库上面去："><a href="#3、最后push到远程仓库上面去：" class="headerlink" title="3、最后push到远程仓库上面去："></a>3、最后push到远程仓库上面去：</h4><pre><code>git push -u origin master</code></pre><h2 id="二、-强行合并两个仓库"><a href="#二、-强行合并两个仓库" class="headerlink" title="二、 强行合并两个仓库"></a>二、 强行合并两个仓库</h2><p>第二种方法就是先将本地的项目初始化为一个git仓库，然后再强行合并本地仓库和远程仓库，由于这两个仓库是完全不同的两个仓库，所以直接pull都会报错，需要在pull的时候假加上–allow-unrelated-histories才可以pull成功。<strong>此方法适用于本地项目已经是一个git仓库的情况。</strong></p><p>具体步骤如下：</p><h4 id="1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下："><a href="#1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下：" class="headerlink" title="1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下："></a>1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下：</h4><pre><code>git init</code></pre><h4 id="2、把当前目录下的已有文件全部加到刚刚新建的git仓库中："><a href="#2、把当前目录下的已有文件全部加到刚刚新建的git仓库中：" class="headerlink" title="2、把当前目录下的已有文件全部加到刚刚新建的git仓库中："></a>2、把当前目录下的已有文件全部加到刚刚新建的git仓库中：</h4><pre><code>git add .</code></pre><h4 id="3、保存刚刚加入的文件，并书写保存信息："><a href="#3、保存刚刚加入的文件，并书写保存信息：" class="headerlink" title="3、保存刚刚加入的文件，并书写保存信息："></a>3、保存刚刚加入的文件，并书写保存信息：</h4><pre><code>git commit -m &quot;push current files&quot;</code></pre><h4 id="4、将本地仓库与远程仓库关联起来："><a href="#4、将本地仓库与远程仓库关联起来：" class="headerlink" title="4、将本地仓库与远程仓库关联起来："></a>4、将本地仓库与远程仓库关联起来：</h4><pre><code>git remote add origin git@github.com:yuanmingchen/tensorflow_study.git</code></pre><h4 id="5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）："><a href="#5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）：" class="headerlink" title="5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）："></a>5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）：</h4><pre><code>git pull origin master --allow-unrelated-histories</code></pre><h4 id="6、把本地仓库的内容push到远程仓库："><a href="#6、把本地仓库的内容push到远程仓库：" class="headerlink" title="6、把本地仓库的内容push到远程仓库："></a>6、把本地仓库的内容push到远程仓库：</h4><pre><code>git push -u origin master</code></pre><p>然后就ok了。</p><hr><h2 id="三、其他git命令"><a href="#三、其他git命令" class="headerlink" title="三、其他git命令"></a>三、其他git命令</h2><p>最后附上git的一些其他命令：<br>1、删除已将关联的远程主机</p><pre><code>git remote rm origin</code></pre><p>2、查看所有本地分支</p><pre><code>git branch -a</code></pre><p>3、新建一个分支，名字叫xf</p><pre><code>git branch xf</code></pre><p>4、切换分支到xf分支</p><pre><code>git checkout xf</code></pre><p>5、把远程分支的代码pull到本地分支：git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<br>如：取回origin主机的master分支，与本地的xf分支合并，输入命令：</p><pre><code>git pull origin master:xf</code></pre><p>6、推送当前的分支，git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br>PS:注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。<br>如：把本地的xf分支推送到origin主机的master分支，输入命令：</p><pre><code>git push origin xf:master</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="http://blog.52pq.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="git" scheme="http://blog.52pq.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统下一键dd安装Centos6-7、Debian7-10、Ubuntu14-18、Windows等</title>
    <link href="http://blog.52pq.cn/2020/11/12/article06/"/>
    <id>http://blog.52pq.cn/2020/11/12/article06/</id>
    <published>2020-11-12T08:44:22.000Z</published>
    <updated>2020-12-24T11:34:34.592Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>集合了Linux和WIN包<br>Linux：centos6-7; Ubuntu 14 16 18；Debian 7 8 9 10；<br>WIN：集合了“”萌咖大佬、老司机、MeowLove “”的系统<br>包含win7 2003 2006 2012 2008 2016 2019等系统<br>当然也可以自定义<br><a href="https://img.zvv.me/file/zvvmebuc/img/2020/02/2020-02-13_11-57-39.png"><img src="https://img.zvv.me/file/zvvmebuc/img/2020/02/2020-02-13_11-57-39.png"></a></p><p>linux默认密码：MoeClub.org 或 cxthhhhh.com（Centos7）</p><p>1、镜像文件在OneDrive</p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/veip007/dd/master/dd-od.sh &amp;&amp; chmod +x dd-od.sh &amp;&amp; ./dd-od.sh</code></pre><p>2、镜像文件在GoogleDrive</p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/veip007/dd/master/dd-gd.sh &amp;&amp; chmod +x dd-gd.sh &amp;&amp; ./dd-gd.sh  1) CentOS 7 (DD) 用户名：root 密码：Pwd@CentOS  2) CentOS 6 (阿里云镜像) 用户名：root 密码：MoeClub.org  3) CentOS 6 用户名：root 密码：MoeClub.org  4) Debian 7 x32 用户名：root 密码：MoeClub.org  5) Debian 8 x64 用户名：root 密码：MoeClub.org  6) Debian 9 x64 用户名：root 密码：MoeClub.org  7) Debian 10 x64 用户名：root 密码：cxthhhhh.com  8) Ubuntu 14.04x64 用户名：root 密码：MoeClub.org  9) Ubuntu 16.04x64 用户名：root 密码：MoeClub.org  10) Ubuntu 18.04x64 用户名：root 密码：MoeClub.org  11) 萌咖Win7x64 用户名:Administrator  密码：Vicer  12) Win2019 By:MeowLove  密码：cxthhhhh.com  13) Win2016 By:MeowLove  密码：cxthhhhh.com  14) Win2012 R2 By:MeowLove  密码：cxthhhhh.com  15) Win2008 R2 By:MeowLove  密码：cxthhhhh.com  16) Windows 7 Vienna By:MeowLove  密码：cxthhhhh.com  17) Windows 2003 Vienna By:MeowLove  密码：cxthhhhh.com  18) Win7x32 By:不知道作者了  用户名:Administrator  密码：Windows7x86-Chinese  19) Win-2003x32 By:老司机  用户名:Administrator  密码：WinSrv2003x86-Chinese  20) Win2008x64 By:老司机  用户名:Administrator  密码：WinSrv2008x64-Chinese  21) Win2012R2x64 By:老司机  用户名:Administrator  密码：WinSrv2012r2  22) CentOS 8 用户名：root 密码：cxthhhhh.com 推荐512M以上使用</code></pre><p>via.<a href="https://zvv.me/go/aHR0cHM6Ly9sb3d2cHMuY24vbGludXgtZGQtY2VudG9zNi03LWRlYmlhbjctMTAtdWJ1bnR1MTQtMTgtd2luZG93cy8=">https://lowvps.cn/linux-dd-centos6-7-debian7-10-ubuntu14-18-windows/</a></p><hr><p>SSH下，root用户。下面的1 和 2，任选1个即可。除Centos7外，其他系统<strong>默认root密码为 MoeClub.org</strong></p><p>1、CentOS 7系统为loc的dansnow大佬制作，脚本也是这个大佬的。CentOS 7的root密码为 Pwd@CentOS</p><pre><code>wget --no-check-certificate -qO AutoDD.sh &#39;https://zhujiwiki.com/wp-content/uploads/2019/07/autodd.sh&#39; &amp;&amp; bash AutoDD.sh</code></pre><p>2、CentOS 7系统为cxthhhhh.com大佬制作。CentOS 7的root密码 cxthhhhh.com</p><pre><code>wget --no-check-certificate -qO AutoDDT.sh &#39;https://zhujiwiki.com/wp-content/uploads/2019/07/autoddt.sh&#39; &amp;&amp; bash AutoDDT.sh</code></pre><p>相关引用：<a href="https://www.hostloc.com/thread-560745-1-1.html">https://www.hostloc.com/thread-560745-1-1.html</a></p><p> via。<a href="https://zvv.me/go/aHR0cHM6Ly96aHVqaXdpa2kuY29tLzEzMzUwLw==">https://zhujiwiki.com/13350/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="linux" scheme="http://blog.52pq.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>redis缓存穿透，缓存击穿，缓存雪崩原因+解决方案</title>
    <link href="http://blog.52pq.cn/2020/11/12/article05/"/>
    <id>http://blog.52pq.cn/2020/11/12/article05/</id>
    <published>2020-11-12T03:25:54.000Z</published>
    <updated>2020-12-24T11:34:35.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在我们日常的开发中，无不都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在高并发的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，磁盘读/写速度比较慢的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成成千上万次的读/写操作，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。</p><p>为了克服上述的问题，项目通常会引入NoSQL技术，这是一种基于内存的数据库，并且提供一定的持久化功能。</p><p>redis技术就是NoSQL技术中的一种，但是引入redis又有可能出现缓存穿透，缓存击穿，缓存雪崩等问题。本文就对这三种问题进行较深入剖析。</p><h3 id="二、初认识"><a href="#二、初认识" class="headerlink" title="二、初认识"></a>二、初认识</h3><ul><li>  缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</li><li>  缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</li><li>  缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。</li></ul><h3 id="三、缓存穿透解决方案"><a href="#三、缓存穿透解决方案" class="headerlink" title="三、缓存穿透解决方案"></a>三、缓存穿透解决方案</h3><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p><strong>有很多种方法可以有效地解决缓存穿透问题</strong>，<strong>最常见</strong>的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。<strong>另外也有一个</strong>更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><p><strong>粗暴方式伪代码：</strong></p><pre><code>//伪代码public object GetProductListNew() &#123;    int cacheTime = 30;    String cacheKey = &quot;product_list&quot;;    String cacheValue = CacheHelper.Get(cacheKey);    if (cacheValue != null) &#123;        return cacheValue;    &#125;    cacheValue = CacheHelper.Get(cacheKey);    if (cacheValue != null) &#123;        return cacheValue;    &#125; else &#123;        //数据库查询不到，为空        cacheValue = GetProductListFromDB();        if (cacheValue == null) &#123;            //如果发现为空，设置个默认值，也缓存起来            cacheValue = string.Empty;        &#125;        CacheHelper.Add(cacheKey, cacheValue, cacheTime);        return cacheValue;    &#125;&#125;</code></pre><h3 id="四、缓存击穿解决方案"><a href="#四、缓存击穿解决方案" class="headerlink" title="四、缓存击穿解决方案"></a>四、缓存击穿解决方案</h3><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><p><strong>使用互斥锁(mutex key)</strong></p><p>业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。</p><p>SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。</p><pre><code>public String get(key) &#123;      String value = redis.get(key);      if (value == null) &#123; //代表缓存值过期          //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db      if (redis.setnx(key_mutex, 1, 3 * 60) == 1) &#123;  //代表设置成功               value = db.get(key);                      redis.set(key, value, expire_secs);                      redis.del(key_mutex);              &#125; else &#123;  //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可                      sleep(50);                      get(key);  //重试              &#125;          &#125; else &#123;              return value;                &#125; &#125;</code></pre><p>memcache代码：</p><pre><code>if (memcache.get(key) == null) &#123;      // 3 min timeout to avoid mutex holder crash      if (memcache.add(key_mutex, 3 * 60 * 1000) == true) &#123;          value = db.get(key);          memcache.set(key, value);          memcache.delete(key_mutex);      &#125; else &#123;          sleep(50);          retry();      &#125;  &#125;</code></pre><p><strong>其它方案：待各位补充。</strong></p><h3 id="五、缓存雪崩解决方案"><a href="#五、缓存雪崩解决方案" class="headerlink" title="五、缓存雪崩解决方案"></a>五、缓存雪崩解决方案</h3><p>与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key。</p><p>缓存正常从Redis中获取，示意图如下：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/W5Wzice6Iz7gSqQ4UoogMtkSMWGWgynS8GtMu35osT9yED1ZE5CCjj0t5E7wPdU01zpMqc6rkYUiabID3YhFz1Lw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="redis1.md" title="redis1.md"></p><p>缓存失效瞬间示意图如下：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/W5Wzice6Iz7gSqQ4UoogMtkSMWGWgynS8oQtvBSortCptOZwgeUyJ6a69Aib1GEVl6vLKwY7TyVWOJHBfNPyWSpg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="redis2.md" title="redis2.md"></p><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！大多数系统设计者考虑用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。还有一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><p><strong>加锁排队，伪代码如下：</strong></p><pre><code>//伪代码public object GetProductListNew() &#123;    int cacheTime = 30;    String cacheKey = &quot;product_list&quot;;    String lockKey = cacheKey;    String cacheValue = CacheHelper.get(cacheKey);    if (cacheValue != null) &#123;        return cacheValue;    &#125; else &#123;        synchronized(lockKey) &#123;            cacheValue = CacheHelper.get(cacheKey);            if (cacheValue != null) &#123;                return cacheValue;            &#125; else &#123;              //这里一般是sql查询数据                cacheValue = GetProductListFromDB();                 CacheHelper.Add(cacheKey, cacheValue, cacheTime);            &#125;        &#125;        return cacheValue;    &#125;&#125;</code></pre><p>加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时，这是个治标不治本的方法！</p><p>注意：加锁排队的解决方式分布式环境的并发问题，有可能还要解决分布式锁的问题；线程还会被阻塞，用户体验很差！因此，在真正的高并发场景下很少使用！</p><p><strong>随机值伪代码：</strong></p><pre><code>//伪代码public object GetProductListNew() &#123;    int cacheTime = 30;    String cacheKey = &quot;product_list&quot;;    //缓存标记    String cacheSign = cacheKey + &quot;_sign&quot;;    String sign = CacheHelper.Get(cacheSign);    //获取缓存值    String cacheValue = CacheHelper.Get(cacheKey);    if (sign != null) &#123;        return cacheValue; //未过期，直接返回    &#125; else &#123;        CacheHelper.Add(cacheSign, &quot;1&quot;, cacheTime);        ThreadPool.QueueUserWorkItem((arg) -&gt; &#123;      //这里一般是 sql查询数据            cacheValue = GetProductListFromDB();           //日期设缓存时间的2倍，用于脏读          CacheHelper.Add(cacheKey, cacheValue, cacheTime * 2);                         &#125;);        return cacheValue;    &#125;&#125; </code></pre><p><strong>解释说明：</strong></p><ul><li>  缓存标记：记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新实际key的缓存；</li><li>  缓存数据：它的过期时间比缓存标记的时间延长1倍，例：标记缓存时间30分钟，数据缓存设置为60分钟。这样，当缓存标记key过期后，实际缓存还能把旧数据返回给调用端，直到另外的线程在后台更新完成后，才会返回新缓存。</li></ul><p>关于缓存崩溃的解决方法，这里提出了三种方案：使用锁或队列、设置过期标志更新缓存、为key设置不同的缓存失效时间，还有一种被称为“二级缓存”的解决方法。</p><h3 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h3><p>针对业务系统，永远都是具体情况具体分析，没有最好，只有最合适。</p><p>于缓存其它问题，缓存满了和数据丢失等问题，大伙可自行学习。最后也提一下三个词LRU、RDB、AOF，通常我们采用LRU策略处理溢出，Redis的RDB和AOF持久化策略来保证一定情况下的数据安全。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="redis" scheme="http://blog.52pq.cn/categories/redis/"/>
    
    
    <category term="redis" scheme="http://blog.52pq.cn/tags/redis/"/>
    
    <category term="缓存" scheme="http://blog.52pq.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>maven项目创建过慢与idea常用快捷键</title>
    <link href="http://blog.52pq.cn/2020/10/28/article03/"/>
    <id>http://blog.52pq.cn/2020/10/28/article03/</id>
    <published>2020-10-28T04:31:57.000Z</published>
    <updated>2020-11-05T02:08:47.521Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>archetypeCatalog<br>internal</p><p>idea常用的快捷键</p><p>Alt+回车 导入包,自动修正</p><p>Ctrl+N   查找类</p><p>Ctrl+Shift+N 查找文件</p><p>Ctrl+Alt+L  格式化代码</p><p>Ctrl+Alt+O 优化导入的类和包</p><p>Alt+Insert 生成代码(如get,set方法,构造函数等)</p><p>Ctrl+E或者Alt+Shift+C  最近更改的代码</p><p>Ctrl+R 替换文本</p><p>Ctrl+F 查找文本</p><p>Ctrl+Shift+Space 自动补全代码</p><p>Ctrl+空格 代码提示</p><p>Ctrl+Alt+Space 类名或接口名提示</p><p>Ctrl+P 方法参数提示</p><p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p><p>Alt+Shift+C 对比最近修改的代码</p><p>Shift+F6  重构-重命名</p><p>Ctrl+Shift+先上键</p><p>Ctrl+X 删除行</p><p>Ctrl+D 复制行</p><p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）</p><p>Ctrl+J  自动代码</p><p>Ctrl+E 最近打开的文件</p><p>Ctrl+H 显示类结构图</p><p>Ctrl+Q 显示注释文档</p><p>Alt+F1 查找代码所在位置</p><p>Alt+1 快速打开或隐藏工程面板</p><p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p><p>Alt+ left/right 切换代码视图</p><p>Alt+ Up/Down 在方法间快速移动定位</p><p>Ctrl+Shift+Up/Down 代码向上/下移动。</p><p>F2 或Shift+F2 高亮错误或警告快速定位</p><p>代码标签输入完成后，按Tab，生成代码。</p><p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p><p>Ctrl+W 选中代码，连续按会有其他效果</p><p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p><p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p><p>Ctrl+B 快速打开光标处的类或方法 </p><p>Intellij IDEA最常用快捷键</p><p>1.Ctrl＋E，可以显示最近编辑的文件列表</p><p>2.Shift＋Click可以关闭文件</p><p>3.Ctrl＋[或]可以跳到大括号的开头结尾</p><p>4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方</p><p>5.Ctrl＋F12，可以显示当前文件的结构</p><p>6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择</p><p>7.Ctrl＋N，可以快速打开类</p><p>8.Ctrl＋Shift＋N，可以快速打开文件</p><p>9.Alt＋Q可以看到当前方法的声明</p><p>10.Ctrl＋W可以选择单词继而语句继而行继而函数</p><p>11.Alt＋F1可以将正在编辑的元素在各个面板中定位</p><p>12.Ctrl＋P，可以显示参数信息</p><p>13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入</p><p>14.Alt＋Insert可以生成构造器/Getter/Setter等</p><p>15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量</p><p>16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch</p><p>17.Alt＋Up and Alt＋Down可在方法间快速移动</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="idea" scheme="http://blog.52pq.cn/categories/idea/"/>
    
    
    <category term="idea" scheme="http://blog.52pq.cn/tags/idea/"/>
    
    <category term="maven" scheme="http://blog.52pq.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>IDEA2020版Maven依赖成功导入但任然报错找不到包解决方案</title>
    <link href="http://blog.52pq.cn/2020/10/27/article01/"/>
    <id>http://blog.52pq.cn/2020/10/27/article01/</id>
    <published>2020-10-27T04:31:57.000Z</published>
    <updated>2020-11-05T02:08:30.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近换了新的idea版本，在使用maven联系springboot项目的时候，pom.xml中的依赖正确，点击运行按钮，报错找不到包</p><p>（例如：Error:(4, 52) java: 程序包org.springframework.beans.factory.annotation不存在），ctrl+鼠标左键却能定位到jar包（说明jar成功导入）<br /><img src="https://img-blog.csdnimg.cn/20200609114221753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA1ODQ3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />报错原因：<br />IDEA启动程序按钮和maven的build使用的jar包环境不一样<br />解决方案：<br />设置idea构建/运行操作委托给maven就行了。具体设置：<br />Settings搜索Runner,勾选delegate ide build/run actions to maven</p><p><img src="https://img-blog.csdnimg.cn/2020060911432970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA1ODQ3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />还要注意编码是否设置UTF-8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="遇到的问题" scheme="http://blog.52pq.cn/categories/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="idea" scheme="http://blog.52pq.cn/tags/idea/"/>
    
    <category term="maven" scheme="http://blog.52pq.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>一招解决GitHub致命的下载速度</title>
    <link href="http://blog.52pq.cn/2020/10/21/article04/"/>
    <id>http://blog.52pq.cn/2020/10/21/article04/</id>
    <published>2020-10-21T01:31:57.000Z</published>
    <updated>2020-11-05T02:09:11.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>通过码云来导入github，通过码云下载</p></blockquote><p>第一步：<br /><strong>找一个你需要下载的GitHub项目</strong><img src="https://img-blog.csdnimg.cn/20200328093031557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>第二步：<br />复制链接</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093109637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>第三步：<br />打开码云，然后选择从GitHub导入</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093143714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p><strong>第四步：<br />复制刚才的连接，起个名字，点击导入</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093223266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br /><strong>这个过程大概一两分钟</strong><br /><img src="https://img-blog.csdnimg.cn/20200328093315682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>导入完成：直接下载zip<br /><img src="https://img-blog.csdnimg.cn/20200328093348780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNDM5Nzc1NTIw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>一个完整的过程动图<br /><img src="https://img-blog.csdnimg.cn/20200328094952899.gif" alt="在这里插入图片描述" /></p><h2><a id="PS_gitgitconfigremoteoriginurlgiteegithub_34"></a><code>PS： 如需更改git中的项目，打开你的项目，找到隐藏的文件夹git，记事本打开config，然后把remote"origin"中的url的gitee改成github</code></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="http://blog.52pq.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="github" scheme="http://blog.52pq.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Word转MD文件</title>
    <link href="http://blog.52pq.cn/2020/10/16/article02/"/>
    <id>http://blog.52pq.cn/2020/10/16/article02/</id>
    <published>2020-10-16T04:31:57.000Z</published>
    <updated>2020-11-05T02:08:34.773Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>把网页的内容全部复制，丢进下面的网站，转为html格式，复制html代码文本<br /><a href="https://wordhtml.com/">WordHtml</a><br />把代码文本放在这里<br /><a href="https://tool.lu/markdown/">Html转MD</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="http://blog.52pq.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="markdown" scheme="http://blog.52pq.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>试Linux端口的连通性的四种方法</title>
    <link href="http://blog.52pq.cn/2020/09/27/aa/"/>
    <id>http://blog.52pq.cn/2020/09/27/aa/</id>
    <published>2020-09-27T04:31:57.000Z</published>
    <updated>2020-11-05T02:10:04.693Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="测试Linux端口的连通性的四种方法"><a href="#测试Linux端口的连通性的四种方法" class="headerlink" title="测试Linux端口的连通性的四种方法"></a>测试Linux端口的连通性的四种方法</h1><p>Linux系统有时候需要测试某个端口的连通性,用户可以参考如下方法来测试。</p><h2 id="方法一、telnet法"><a href="#方法一、telnet法" class="headerlink" title="方法一、telnet法"></a><strong>方法一、telnet法</strong></h2><p> telnet为用户提供了在本地计算机上完成远程主机工作的能力,因此可以通过telnet来测试端口的连通性,具体用法格式:</p><p><strong>telnet ip port</strong> </p><p>说明:</p><p><strong>ip:</strong> 是测试主机的ip地址</p><p><strong>port:</strong> 是端口,比如80</p><p>如果telnet连接不存在的端口,那会如下图所示。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/009e68cdd64f3476b58d5eabffc28cf7.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><p>如果telnet 连接存在端口会出现如下图所示的内容,下图中以80端口为例。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/71ef79d150a5e8a63e92d7889250cce2.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><h2 id="方法二、ssh法"><a href="#方法二、ssh法" class="headerlink" title="方法二、ssh法"></a><strong>方法二、ssh法</strong></h2><p>SSH 是目前较可靠,专为远程登录会话和其他网络服务提供安全性的协议,在linux上可以通过ssh命令来测试端口的连通性,具体用法格式如下:</p><p>用法: <strong>ssh -v -p port <a href="https://www.aliyun.com/jiaocheng/129726.html">aliyunzixun@xxx.com</a></strong></p><p>说明:</p><p><strong>-v</strong>调试模式(会打印日志).</p><p><strong>-p</strong>指定端口</p><p><strong>username:</strong> 远程主机的登录用户</p><p><strong>ip:</strong> 远程主机</p><p>如果远程主机开通了相应的端口,会有如下图所示的建立成功的提示。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/8abd5ae20d0dd5cbc33095047fdc7d4a.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><p>如果远程主机没有开通相应的端口,则如下图所示</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/30bb7641ce29a897d8b344efa783d085.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><h2 id="方法三、curl法"><a href="#方法三、curl法" class="headerlink" title="方法三、curl法"></a><strong>方法三、curl法</strong></h2><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。也可以用来测试端口的连通性,具体用法:</p><p><strong>curl ip:port</strong></p><p>说明:</p><p><strong>ip</strong>:是测试主机的ip地址</p><p><strong>port:</strong> 是端口,比如80</p><p>如果远程主机开通了相应的端口,都会输出信息,如果没有开通相应的端口,则没有任何提示,需要CTRL+C断开。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/3603623912d03932de77f6830910b340.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><h2 id="方法四、wget方法"><a href="#方法四、wget方法" class="headerlink" title="方法四、wget方法"></a><strong>方法四、wget方法</strong></h2><p>wget是一个从网络上自动下载文件的自由工具**,支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载**,并可以使用HTTP代理。wget名称的由来是<strong>“World Wide Web”与“get”的结</strong>合,它也可以用来测试端口的连通性具体用法:</p><p><strong>wget ip:port</strong></p><p>说明:</p><p><strong>ip:</strong> 是测试主机的ip地址</p><p><strong>port:</strong> 是端口,比如80</p><p>如果远程主机不存在端口则会一直提示连接主机。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/192fd66f1b2d3b22a0941e78627c50c5.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p><p>如果远程主机存在端口则会看到相应的信息,如下图所示。</p><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/06f1b33f8702a1aa0ffa41166606a96a.jpg?x-oss-process=image/resize,p_100/auto-orient,1/quality,q_90/format,jpg/watermark,image_eXVuY2VzaGk=,t_100,g_se,x_0,y_0" alt="Linux测试端口的连通性的四种方法"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="http://blog.52pq.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="http://blog.52pq.cn/tags/linux/"/>
    
    <category term="运维" scheme="http://blog.52pq.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
